import React, { useState, useEffect } from 'react';
import { Activity, TrendingUp, TrendingDown, Clock, Moon, Sun } from 'lucide-react';
import { CompetitionData } from '../types';

const ActivityFeed: React.FC = () => {
  const [data, setData] = useState<CompetitionData | null>(null);
  const [loading, setLoading] = useState(true);
  const [lastUpdated, setLastUpdated] = useState<Date | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [isDarkMode, setIsDarkMode] = useState(false);

  const fetchData = async () => {
    try {
      setLoading(true);
      setError(null);
      
      // Try to fetch from competition_data.json (generated by Python scraper)
      const response = await fetch('/competition_data.json');
      
      if (!response.ok) {
        throw new Error('Failed to fetch data');
      }
      
      const competitionData: CompetitionData = await response.json();
      setData(competitionData);
      setLastUpdated(new Date());
    } catch (err) {
      console.error('Error fetching data:', err);
      setError('Failed to load competition data');
      
      // Use mock data for development
      const mockData: CompetitionData = {
        competition: 'baird-pwm-intern-stock-market-competition',
        scraped_at: new Date().toISOString(),
        competitors: [
          {
            public_id: '-Ct8JFv9TYip',
            name: 'John Doe',
            rank: 1,
            portfolio_value: 1315450.18,
            return_percentage: 31.55,
            return_dollars: 315450.18,
            transactions: [],
            last_updated: new Date().toISOString(),
          },
          {
            public_id: '-Xyz123ABC',
            name: 'Jane Smith',
            rank: 2,
            portfolio_value: 1250000.00,
            return_percentage: 25.00,
            return_dollars: 250000.00,
            transactions: [],
            last_updated: new Date().toISOString(),
          },
        ],
        activity_feed: [
          {
            timestamp: '7/9/25 10:45a ET',
            player_name: 'John Doe',
            player_rank: 1,
            action: 'Buy',
            symbol: 'TSLA',
            amount: 1000,
            price: '$245.67',
            portfolio_value: 1315450.18,
          },
          {
            timestamp: '7/9/25 10:30a ET',
            player_name: 'Jane Smith',
            player_rank: 2,
            action: 'Sell',
            symbol: 'AAPL',
            amount: 500,
            price: '$188.23',
            portfolio_value: 1250000.00,
          },
          {
            timestamp: '7/9/25 10:15a ET',
            player_name: 'John Doe',
            player_rank: 1,
            action: 'Short',
            symbol: 'PHH',
            amount: 359328,
            price: '$1.32',
            portfolio_value: 1315450.18,
          },
        ],
      };
      setData(mockData);
      setLastUpdated(new Date());
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchData();
    
    // Auto-refresh every 5 minutes
    const interval = setInterval(fetchData, 5 * 60 * 1000);
    
    return () => clearInterval(interval);
  }, []);

  // Update body class for dark mode
  useEffect(() => {
    if (isDarkMode) {
      document.body.classList.add('dark');
    } else {
      document.body.classList.remove('dark');
    }
  }, [isDarkMode]);

  const getActionIcon = (action: string) => {
    switch (action.toLowerCase()) {
      case 'buy':
        return <TrendingUp className="activity-icon" style={{ color: '#10b981' }} />;
      case 'sell':
        return <TrendingDown className="activity-icon" style={{ color: '#ef4444' }} />;
      case 'short':
        return <TrendingDown className="activity-icon" style={{ color: '#f97316' }} />;
      case 'cover':
        return <TrendingUp className="activity-icon" style={{ color: '#3b82f6' }} />;
      default:
        return <Activity className="activity-icon" style={{ color: '#6b7280' }} />;
    }
  };

  const getActionClass = (action: string) => {
    switch (action.toLowerCase()) {
      case 'buy':
        return 'action-badge action-buy';
      case 'sell':
        return 'action-badge action-sell';
      case 'short':
        return 'action-badge action-short';
      case 'cover':
        return 'action-badge action-cover';
      default:
        return 'action-badge';
    }
  };

  const formatNumber = (num: number) => {
    return new Intl.NumberFormat('en-US').format(num);
  };

  const formatCurrency = (num: number) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
    }).format(num);
  };

  const calculateTradeSize = (amount: number, price: string) => {
    // Remove $ and convert to number
    const priceNum = parseFloat(price.replace('$', ''));
    return amount * priceNum;
  };

  if (loading) {
    return (
      <div className="loading">
        <div className="spinner"></div>
        <span>Loading competition data...</span>
      </div>
    );
  }

  return (
    <div className={`container ${isDarkMode ? 'dark' : ''}`}>
      {/* Header */}
      <div className="header">
        <div className="header-content">
          <div>
            <h1>Baird PWM Intern Stock Market Competition</h1>
            <p>Real-time activity feed</p>
          </div>
          
          {/* Theme Toggle */}
          <button
            onClick={() => setIsDarkMode(!isDarkMode)}
            className="theme-toggle"
            aria-label="Toggle theme"
          >
            {isDarkMode ? <Sun size={20} /> : <Moon size={20} />}
          </button>
        </div>
        
        {lastUpdated && (
          <div className="last-updated">
            <Clock className="last-updated-icon" />
            <span>Last updated: {lastUpdated.toLocaleTimeString()}</span>
          </div>
        )}
      </div>


      {/* Activity Feed */}
      <div className="activity-feed">
        <div className="activity-table">
          <div className="table-header">
            <div className="table-cell">Rank</div>
            <div className="table-cell">Player</div>
            <div className="table-cell">Action</div>
            <div className="table-cell">Symbol</div>
            <div className="table-cell">Amount</div>
            <div className="table-cell">Price</div>
            <div className="table-cell">Trade Size</div>
            <div className="table-cell">Portfolio</div>
            <div className="table-cell">Time</div>
          </div>
          
          {data?.activity_feed.map((activity, index) => (
            <div key={index} className="table-row">
              <div className="table-cell rank-cell">
                <span className={`rank-bubble rank-${activity.player_rank}`}>
                  {activity.player_rank}
                </span>
              </div>
              <div className="table-cell player-cell">
                <span className="player-name">{activity.player_name}</span>
              </div>
              <div className="table-cell action-cell">
                {getActionIcon(activity.action)}
                <span className={getActionClass(activity.action)}>
                  {activity.action}
                </span>
              </div>
              <div className="table-cell symbol-cell">
                <span className="symbol-bubble">
                  {activity.symbol}
                </span>
              </div>
              <div className="table-cell amount-cell">
                {formatNumber(activity.amount)}
              </div>
              <div className="table-cell price-cell">
                {activity.price}
              </div>
              <div className="table-cell trade-size-cell">
                {formatCurrency(calculateTradeSize(activity.amount, activity.price))}
              </div>
              <div className="table-cell portfolio-cell">
                {formatCurrency(activity.portfolio_value)}
              </div>
              <div className="table-cell time-cell">
                {activity.timestamp}
              </div>
            </div>
          ))}
          
          {!data?.activity_feed.length && (
            <div className="no-activity">
              <Activity className="no-activity-icon" />
              <p>No recent activity</p>
            </div>
          )}
        </div>
      </div>

      {error && (
        <div className="error-banner">
          <p className="error-text">
            {error} - Showing demo data for development
          </p>
        </div>
      )}
    </div>
  );
};

export default ActivityFeed;